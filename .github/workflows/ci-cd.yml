name: ChunkVault CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chunkvault_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chunkvault_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
        run: |
          pytest --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          # Update image tag in deployment manifests
          sed -i "s|chunkvault:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" k8s/api/api-deployment.yaml
          sed -i "s|chunkvault:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" k8s/api/celery.yaml
          sed -i "s|chunkvault:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" k8s/storage/storage-nodes.yaml
          sed -i "s|chunkvault:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" k8s/api/ui.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/infrastructure/namespace.yaml
          kubectl apply -f k8s/infrastructure/postgres.yaml
          kubectl apply -f k8s/infrastructure/redis.yaml
          kubectl apply -f k8s/storage/storage-nodes.yaml
          kubectl apply -f k8s/api/api-deployment.yaml
          kubectl apply -f k8s/api/celery.yaml
          kubectl apply -f k8s/api/ui.yaml
          kubectl apply -f k8s/monitoring/prometheus.yaml
          kubectl apply -f k8s/monitoring/grafana.yaml

          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/chunkvault-api -n chunkvault
          kubectl wait --for=condition=available --timeout=300s deployment/chunkvault-ui -n chunkvault

      - name: Verify deployment
        run: |
          kubectl get pods -n chunkvault
          kubectl get services -n chunkvault
