version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: chunkvault
      POSTGRES_USER: chunkvault
      POSTGRES_PASSWORD: chunkvault
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chunkvault"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main API service
  chunkvault-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=chunkvault-super-secret-key-change-in-production
      - DATABASE_URL=postgresql://chunkvault:chunkvault@postgres:5432/chunkvault
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      storage-node-1:
        condition: service_started
      storage-node-2:
        condition: service_started
      storage-node-3:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build: .
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://chunkvault:chunkvault@postgres:5432/chunkvault
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./storage:/app/storage

  # Celery Beat (Scheduler)
  celery-beat:
    build: .
    command: celery -A celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://chunkvault:chunkvault@postgres:5432/chunkvault
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./storage:/app/storage

  # Storage nodes
  storage-node-1:
    build: .
    command: python storage_node.py
    ports:
      - "8001:8001"
    environment:
      - NODE_ID=node-1
      - HOST=0.0.0.0
      - PORT=8001
      - STORAGE_PATH=/app/storage/node-1
    volumes:
      - storage_node_1:/app/storage/node-1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  storage-node-2:
    build: .
    command: python storage_node.py
    ports:
      - "8002:8002"
    environment:
      - NODE_ID=node-2
      - HOST=0.0.0.0
      - PORT=8002
      - STORAGE_PATH=/app/storage/node-2
    volumes:
      - storage_node_2:/app/storage/node-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  storage-node-3:
    build: .
    command: python storage_node.py
    ports:
      - "8003:8003"
    environment:
      - NODE_ID=node-3
      - HOST=0.0.0.0
      - PORT=8003
      - STORAGE_PATH=/app/storage/node-3
    volumes:
      - storage_node_3:/app/storage/node-3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web UI
  chunkvault-ui:
    build: .
    command: streamlit run streamlit_app.py --server.port=8501 --server.address=0.0.0.0
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://chunkvault-api:8000
    depends_on:
      chunkvault-api:
        condition: service_healthy

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  storage_node_1:
  storage_node_2:
  storage_node_3:
  prometheus_data:
  grafana_data: